# Changing directory shorthands
alias c="cd"
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# More shorthands
alias q="exit"
alias v="vim"
alias d="cd ~/dev"
alias p="cd ~/proj"
alias verynice="ionice -c3 nice -n19 "

alias geertsync="rsync -avzP "
alias wgeert='wget --tries=0 --read-timeout=8 --continue -e robots=off --no-parent '

alias ggrep="grep -iHn "
alias pss="ps auxwf"
alias apt="sudo apt "

# Add to clipboard using `command | clip` (requires `apt install xclip`)
alias clip="xclip -selection c "

# Scientific calculator
alias calc="ipython -i -c 'import numpy as np; import pandas as pd; import astropy.units as u; import astropy.constants as c'"

# Python shortcuts
alias ipy="ipython"
alias serve="python -m http.server"
alias ssi="python ~/bin/ssi-server/ssi_server.py"
alias p2="source activate p2"

# Turn Python warning on/off
alias pywarnings_ignore="export PYTHONWARNINGS='ignore'"
alias pywarnings_default="export PYTHONWARNINGS='default'"
alias pywarnings_all="export PYTHONWARNINGS='all'"

# Social functions
alias geertspeak="espeak -v mb-en1 -s 100 "
alias converse="geertspeak 'Hello!'; read; geertspeak 'I am great!' read; geertspeak 'Are you enjoying the weather?'; read; geertspeak 'Oh I know! It was the same yesterday!'; read; geertspeak 'Oh I see.'; read; geertspeak 'Sounds good to me!'; read; geertspeak 'Ok, see you soon!'"

# Git
alias ga='git add '
alias gp='git pull '
alias gs='git status '
alias gc='git commit -m '
alias gd='git diff '
alias gss='git status --short '
alias gds='git diff --staged '

# Tmux
alias t='tmux'
alias tn='tmux new-session -s'
alias ta='tmux attach-session -t'
alias tl='tmux list-session'
alias tk='tmux kill-server'

# Impressive needs system python
alias keynote='/usr/bin/python /usr/bin/impressive --nologo -T 200'

# System tools
alias ls='ls --color=auto'
alias l='ls -lha --color=auto'
alias ll='ls -lha --color=auto'
alias grep='grep --color=auto'
# List information on the drives
alias lsfs='lsblk'
# Which services are running?
alias geertnetstat='sudo netstat -tulpn'
# Show a nicer version of top with 0.5s refresh
alias ht='htop -d 0.5'

# TopCat
JAVA="java -XX:+UseConcMarkSweepGC"  # system java
alias tc="nice $JAVA -Xmx2000m -classpath $HOME/bin/topcat-full.jar:$HOME/bin/postgresql.jdbc4.jar -Djdbc.drivers=org.postgresql.Driver uk.ac.starlink.topcat.Driver"
alias stilts="tc -stilts"

# Databases
alias startdb="pg_ctl -D $HOME/msc/pgdata -l $HOME/tmp/pg.log start"
alias pglocal="pg_ctl -D $HOME/msc/pgdata -l $HOME/tmp/pg.log "
alias startmongo="mongod --port 4230 --dbpath $HOME/msc/mongodata --logpath $HOME/tmp/mongodb.log --logappend --fork"
# Mac: mongod run --config /usr/local/etc/mongod.conf
alias mongo="mongo --port 4230"


#######################
# Convenience functions
#######################
# (because aliases don't support $1, $2, etc)

# Combine mkdir and cd into `mkcd`
mkcd()
{
    mkdir -p -- "$1" &&
      cd -P -- "$1"
}

# Extract a single line from a file
getline()
{
    sed "$2q;d" $1
}

# Inspect a FITS object quickly using `ifi`
ifi()
{
    ipython -i -c "from astropy.io import fits; print(\"\\nFor your convenience, ipython ran:\\nf = fits.open($1)\"); f = fits.open(\"$1\")"
}

# Print the percentiles of a fits extension
fitshist()
{
    python -c "from astropy.io import fits; import numpy as np; f = fits.open(\"$1\"); print(np.percentile(f[$2].data[f[$2].data > -1], [0, 1, 25, 50, 75, 99, 100]))"
}

# Extract an extension from a multi-extension FITS file
fitsgrab()
{
    OUTPUT=`basename $1`"-$2.fits"
    echo "Writing $OUTPUT"
    python -c "from astropy.io import fits; fits.open('$1')[$2].writeto('$OUTPUT', clobber=True)"
}

# `pipe2csv` converts pipe- to comma-delimited csv files
function pipe2csv() {
    OUTPUT="$1.csv"
    echo "Writing $OUTPUT"
    csvformat --delimiter \| --out-delimiter , $1 > $OUTPUT
}

# `csv2pipe` converts comma- to pipe-delimited csv files
function csv2pipe() {
    OUTPUT="$1.pipe"
    echo "Writing $OUTPUT"
    csvformat --delimiter , --out-delimiter \| $1 > $OUTPUT
}

# `csv2fits` converts csv files into fits format using stilts
function csv2fits() {
    OUTPUT="$1.fits"
    echo "Writing $OUTPUT"
    stilts tcopy ifmt=csv ofmt=fits-plus $1 $OUTPUT
}

# `vot2csv` converts VOTable files into csv format using stilts
function vot2csv() {
    OUTPUT="$1.csv"
    echo "Writing $OUTPUT"
    stilts tcopy ifmt=votable ofmt=csv $1 $OUTPUT
}
